# Nginx图片优化配置文件
# 将此配置复制到 /etc/nginx/conf.d/image-optimization.conf 
# 或包含在 http {} 块中的主nginx.conf文件

# 图片缓存目录
proxy_cache_path /var/cache/nginx/images levels=1:2 keys_zone=images_cache:10m max_size=1g inactive=30d;
proxy_temp_path /var/cache/nginx/images_temp;

# 图片处理配置
server {
    # 使用与主站相同的监听设置
    listen 80;
    server_name _;  # 匹配所有域名

    # 处理带w参数的图片请求 - 宽度调整
    location ~ ^/uploads/.*\.(jpe?g|png|gif|webp)$ {
        # 启用缓存
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        
        # 处理resize请求
        location ~ ^/uploads/.*_(\d+)x(\d+)\.(jpe?g|png|gif|webp)$ {
            # 使用正则表达式捕获的尺寸信息
            # 例如: /uploads/image_400x300.jpg 将调整为 400x300
            image_filter resize $1 $2;
            image_filter_jpeg_quality 75;
            image_filter_buffer 10M;
            
            # 尝试找到原始图片
            rewrite ^(/uploads/.*?)_\d+x\d+(\.\w+)$ $1$2 break;
            try_files $uri =404;
        }
        
        # 默认处理
        try_files $uri =404;
    }
}

# 性能优化
worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    # 启用 sendfile 以加速文件传输
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # 增加打开文件缓存
    open_file_cache max=10000 inactive=30s;
    open_file_cache_valid 60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # 设置日志级别，生产环境建议设置为warn
    error_log /var/log/nginx/error.log warn;
}

# 注意：你需要确保Nginx编译时包含了 http_image_filter_module 模块
# 安装方法 (Ubuntu/Debian):
# apt-get install nginx-module-image-filter
#
# 安装后，请确保在nginx.conf中有如下行:
# load_module modules/ngx_http_image_filter_module.so; 